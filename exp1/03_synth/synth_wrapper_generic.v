
// Generated by Cadence Genus(TM) Synthesis Solution GENUS15.20 - 15.20-p004_1
// Generated on: May 24 2025 12:41:53

// Verification Directory fv/synth_wrapper 

module fulladder(X, Y, Ci, S, Co);
  input X, Y, Ci;
  output S, Co;
  wire X, Y, Ci;
  wire S, Co;
  wire w1, w2, w3;
  xor G1 (w1, X, Y);
  xor G2 (S, w1, Ci);
  and G3 (w2, w1, Ci);
  and G4 (w3, X, Y);
  or G5 (Co, w2, w3);
endmodule

module ripple_adder(X, Y, S, Co, Cin);
  input [3:0] X, Y;
  input Cin;
  output [3:0] S;
  output Co;
  wire [3:0] X, Y;
  wire Cin;
  wire [3:0] S;
  wire Co;
  wire w1, w2, w3;
  fulladder u1(X[0], Y[0], Cin, S[0], w1);
  fulladder u2(X[1], Y[1], w1, S[1], w2);
  fulladder u3(X[2], Y[2], w2, S[2], w3);
  fulladder u4(X[3], Y[3], w3, S[3], Co);
endmodule

module synth_wrapper(X, Y, rst_n, clk, S, Cin, Co);
  input [3:0] X, Y;
  input rst_n, clk, Cin;
  output [3:0] S;
  output Co;
  wire [3:0] X, Y;
  wire rst_n, clk, Cin;
  wire [3:0] S;
  wire Co;
  wire [3:0] X_reg;
  wire [3:0] Y_reg;
  wire Cin_reg, Co_reg_44, \S_reg[0]_32 , \S_reg[1]_33 , \S_reg[2]_34 ,
       \S_reg[3]_35 , n_15;
  ripple_adder u1(X_reg, Y_reg, {\S_reg[3]_35 , \S_reg[2]_34 ,
       \S_reg[1]_33 , \S_reg[0]_32 }, Co_reg_44, Cin_reg);
  CDN_flop Cin_reg_reg(.clk (clk), .d (Cin), .sena (1'b1), .aclr
       (n_15), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (Cin_reg));
  CDN_flop Co_reg(.clk (clk), .d (Co_reg_44), .sena (1'b1), .aclr
       (n_15), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (Co));
  CDN_flop \S_reg[0] (.clk (clk), .d (\S_reg[0]_32 ), .sena (1'b1),
       .aclr (n_15), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (S[0]));
  CDN_flop \S_reg[1] (.clk (clk), .d (\S_reg[1]_33 ), .sena (1'b1),
       .aclr (n_15), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (S[1]));
  CDN_flop \S_reg[2] (.clk (clk), .d (\S_reg[2]_34 ), .sena (1'b1),
       .aclr (n_15), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (S[2]));
  CDN_flop \S_reg[3] (.clk (clk), .d (\S_reg[3]_35 ), .sena (1'b1),
       .aclr (n_15), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (S[3]));
  CDN_flop \X_reg_reg[0] (.clk (clk), .d (X[0]), .sena (1'b1), .aclr
       (n_15), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (X_reg[0]));
  CDN_flop \X_reg_reg[1] (.clk (clk), .d (X[1]), .sena (1'b1), .aclr
       (n_15), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (X_reg[1]));
  CDN_flop \X_reg_reg[2] (.clk (clk), .d (X[2]), .sena (1'b1), .aclr
       (n_15), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (X_reg[2]));
  CDN_flop \X_reg_reg[3] (.clk (clk), .d (X[3]), .sena (1'b1), .aclr
       (n_15), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (X_reg[3]));
  CDN_flop \Y_reg_reg[0] (.clk (clk), .d (Y[0]), .sena (1'b1), .aclr
       (n_15), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (Y_reg[0]));
  CDN_flop \Y_reg_reg[1] (.clk (clk), .d (Y[1]), .sena (1'b1), .aclr
       (n_15), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (Y_reg[1]));
  CDN_flop \Y_reg_reg[2] (.clk (clk), .d (Y[2]), .sena (1'b1), .aclr
       (n_15), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (Y_reg[2]));
  CDN_flop \Y_reg_reg[3] (.clk (clk), .d (Y[3]), .sena (1'b1), .aclr
       (n_15), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (Y_reg[3]));
  not g1 (n_15, rst_n);
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
